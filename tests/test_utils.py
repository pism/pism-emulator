# Copyright (C) 2019 Rachel Chen, Andy Aschwanden
#
# This file is part of pism-emulator.
#
# PISM-EMULATOR is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# PISM-EMULATOR is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

from io import StringIO

import numpy as np
import pandas as pd
import pytest
from numpy.testing import assert_array_almost_equal

from pism_emulator.utils import (
    calc_bic,
    gelman_rubin,
    kl_divergence,
    prepare_data,
    rmsd,
    stepwise_bic,
)

# Test data from DeConto and Pollard (2016):
# Contribution of Antarctica to past and future sea-level rise
# (http://doi.org/10.1038/nature17145)
# as prepared by
# Edwards et al (2019): Revisiting Antarctic ice loss due to marine ice-cliff instability
# (https://doi.org/10.1038/s41586-019-0901-4)
# https://doi.org/10.24433/CO.4ebd8cda-35c0-4d8f-9b7c-d1b064109437


@pytest.fixture(name="dp16data")
def fixture_dp16_df() -> pd.DataFrame:
    dp16_data = StringIO(
        """
, OCFAC, CREVLIQ, VCLIF, BIAS, LIG, PLIO, RCP45_pres, RCP26_2100, RCP45_2100, RCP85_2100
1,0.1,0,0,0,-0.45,3.54,-0.047,-0.276,-0.253,-0.144
2,0.1,0,1,0,-0.44,3.52,-0.047,-0.277,-0.255,-0.144
3,0.1,0,3,0,-0.43,3.65,-0.046,-0.274,-0.253,-0.141
4,0.1,0,5,0,-0.42,3.66,-0.046,-0.273,-0.252,-0.143
5,0.1,50,0,0,-0.3,4.39,-0.047,-0.265,-0.221,-0.072
6,0.1,50,1,0,2.63,8.29,-0.042,-0.192,-0.073,0.162
7,0.1,50,3,0,3.53,10.72,-0.035,-0.06,0.204,0.655
8,0.1,50,5,0,3.76,10.89,-0.031,0.082,0.509,1.151
9,0.1,100,0,0,-0.27,4.31,-0.046,-0.261,-0.218,-0.06
10,0.1,100,1,0,3.41,8.42,-0.041,-0.166,-0.045,0.195
11,0.1,100,3,0,4.44,11.15,-0.033,-0.009,0.284,0.736
12,0.1,100,5,0,4.72,11.31,-0.028,0.177,0.635,1.288
13,0.1,150,0,0,-0.23,4.14,-0.046,-0.261,-0.217,-0.059
14,0.1,150,1,0,3.68,8.66,-0.039,-0.159,-0.033,0.205
15,0.1,150,3,0,4.75,11.24,-0.031,0.023,0.312,0.769
16,0.1,150,5,0,4.92,11.57,-0.025,0.21,0.672,1.337
17,1,0,0,0,1.15,3.74,-0.042,-0.248,-0.225,-0.119
18,1,0,1,0,1.17,3.81,-0.042,-0.247,-0.224,-0.119
19,1,0,3,0,1.22,4.36,-0.041,-0.244,-0.22,-0.116
20,1,0,5,0,1.18,4.5,-0.041,-0.243,-0.222,-0.116
21,1,50,0,0,1.2,4.57,-0.042,-0.237,-0.196,-0.048
22,1,50,1,0,4.68,8.53,-0.037,-0.165,-0.038,0.19
23,1,50,3,0,5.73,10.93,-0.03,-0.031,0.246,0.693
24,1,50,5,0,5.92,11,-0.027,0.112,0.549,1.199
25,1,100,0,0,1.2,4.56,-0.041,-0.235,-0.194,-0.041
26,1,100,1,0,5.02,8.83,-0.035,-0.14,-0.013,0.224
27,1,100,3,0,6.09,11.26,-0.028,0.028,0.321,0.773
28,1,100,5,0,6.22,11.47,-0.023,0.219,0.673,1.326
29,1,150,0,0,1.13,4.51,-0.041,-0.234,-0.192,-0.043
30,1,150,1,0,5.12,8.88,-0.035,-0.127,-0.001,0.238
31,1,150,3,0,6.21,11.39,-0.027,0.056,0.347,0.806
32,1,150,5,0,6.41,11.81,-0.02,0.248,0.715,1.375
33,3,0,0,0,3.18,4.21,-0.032,-0.187,-0.156,-0.063
34,3,0,1,0,3.28,4.63,-0.032,-0.185,-0.155,-0.064
35,3,0,3,0,3.31,4.87,-0.03,-0.176,-0.146,-0.055
36,3,0,5,0,3.27,4.95,-0.028,-0.175,-0.143,-0.049
37,3,50,0,0,3.28,4.76,-0.031,-0.178,-0.134,-0.005
38,3,50,1,0,5.37,9.02,-0.028,-0.102,0.036,0.27
39,3,50,3,0,6.23,11.29,-0.019,0.036,0.344,0.802
40,3,50,5,0,6.34,11.45,-0.014,0.177,0.672,1.336
41,3,100,0,0,3.3,4.82,-0.031,-0.176,-0.13,0
42,3,100,1,0,6.31,9.28,-0.025,-0.069,0.065,0.301
43,3,100,3,0,7.7,11.38,-0.016,0.13,0.429,0.88
44,3,100,5,0,6.55,11.6,-0.011,0.327,0.827,1.478
45,3,150,0,0,3.32,4.84,-0.031,-0.175,-0.13,0.005
46,3,150,1,0,6.36,9.4,-0.025,-0.053,0.079,0.306
47,3,150,3,0,7.89,11.49,-0.016,0.158,0.465,0.915
48,3,150,5,0,7.99,11.9,-0.008,0.356,0.876,1.51
49,10,0,0,0,5.32,5.36,0.002,-0.046,-0.006,0.093
50,10,0,1,0,5.65,5.73,0.002,-0.036,0.003,0.097
51,10,0,3,0,5.8,5.84,0.003,-0.02,0.019,0.111
52,10,0,5,0,5.81,5.89,0.004,0.025,0.036,0.122
53,10,50,0,0,5.28,6.01,0.001,-0.036,0.025,0.175
54,10,50,1,0,7.67,9.69,0.007,0.071,0.241,0.49
55,10,50,3,0,8.55,11.59,0.014,0.24,0.644,1.088
56,10,50,5,0,8.66,11.83,0.02,0.45,1.1,1.732
57,10,100,0,0,5.32,6.01,0.001,-0.029,0.032,0.196
58,10,100,1,0,7.8,9.86,0.009,0.099,0.268,0.526
59,10,100,3,0,8.79,11.88,0.019,0.302,0.755,1.162
60,10,100,5,0,8.89,12.05,0.025,0.573,1.275,1.854
61,10,150,0,0,5.34,5.98,0.001,-0.033,0.035,0.203
62,10,150,1,0,7.82,9.97,0.009,0.108,0.292,0.539
63,10,150,3,0,8.93,11.97,0.02,0.321,0.796,1.2
64,10,150,5,0,9.04,12.41,0.027,0.605,1.334,1.9
65,0.1,0,0,1,-0.45,3.54,-0.047,-0.274,-0.252,-0.144
66,0.1,0,1,1,-0.44,3.52,-0.047,-0.274,-0.253,-0.143
67,0.1,0,3,1,-0.43,3.65,-0.046,-0.271,-0.251,-0.141
68,0.1,0,5,1,-0.42,3.66,-0.045,-0.272,-0.25,-0.139
69,0.1,50,0,1,-0.3,4.39,-0.047,-0.264,-0.22,-0.069
70,0.1,50,1,1,2.63,8.29,-0.042,-0.19,-0.071,0.164
71,0.1,50,3,1,3.53,10.72,-0.034,-0.059,0.203,0.647
72,0.1,50,5,1,3.76,10.89,-0.031,0.069,0.505,1.144
73,0.1,100,0,1,-0.27,4.31,-0.046,-0.26,-0.218,-0.06
74,0.1,100,1,1,3.41,8.42,-0.041,-0.164,-0.043,0.196
75,0.1,100,3,1,4.44,11.15,-0.032,-0.006,0.284,0.74
76,0.1,100,5,1,4.72,11.31,-0.028,0.184,0.623,1.282
77,0.1,150,0,1,-0.23,4.14,-0.046,-0.258,-0.217,-0.058
78,0.1,150,1,1,3.68,8.66,-0.04,-0.157,-0.034,0.212
79,0.1,150,3,1,4.75,11.24,-0.03,0.024,0.312,0.77
80,0.1,150,5,1,4.92,11.57,-0.024,0.215,0.681,1.343
81,1,0,0,1,1.15,3.74,-0.036,-0.22,-0.199,-0.1
82,1,0,1,1,1.17,3.81,-0.036,-0.217,-0.194,-0.097
83,1,0,3,1,1.22,4.36,-0.035,-0.21,-0.188,-0.086
84,1,0,5,1,1.18,4.5,-0.034,-0.209,-0.188,-0.087
85,1,50,0,1,1.2,4.57,-0.036,-0.212,-0.173,-0.033
86,1,50,1,1,4.68,8.53,-0.031,-0.136,-0.001,0.23
87,1,50,3,1,5.73,10.93,-0.024,0.012,0.305,0.769
88,1,50,5,1,5.92,11,-0.019,0.158,0.633,1.3
89,1,100,0,1,1.2,4.56,-0.036,-0.209,-0.173,-0.027
90,1,100,1,1,5.02,8.83,-0.031,-0.108,0.028,0.263
91,1,100,3,1,6.09,11.26,-0.022,0.07,0.394,0.861
92,1,100,5,1,6.22,11.47,-0.015,0.272,0.783,1.445
93,1,150,0,1,1.13,4.51,-0.036,-0.209,-0.171,-0.027
94,1,150,1,1,5.12,8.88,-0.03,-0.096,0.043,0.273
95,1,150,3,1,6.21,11.39,-0.021,0.102,0.425,0.881
96,1,150,5,1,6.41,11.81,-0.012,0.307,0.842,1.484
97,3,0,0,1,3.18,4.21,-0.02,-0.131,-0.096,-0.007
98,3,0,1,1,3.28,4.63,-0.02,-0.125,-0.093,-0.001
99,3,0,3,1,3.31,4.87,-0.017,-0.107,-0.072,0.018
100,3,0,5,1,3.27,4.95,-0.014,-0.011,0.014,0.11
101,3,50,0,1,3.28,4.76,-0.02,-0.123,-0.063,0.089
102,3,50,1,1,5.37,9.02,-0.014,-0.035,0.138,0.392
103,3,50,3,1,6.23,11.29,-0.006,0.118,0.547,0.993
104,3,50,5,1,6.34,11.45,0,0.368,1.02,1.659
105,3,100,0,1,3.3,4.82,-0.02,-0.12,-0.053,0.103
106,3,100,1,1,6.31,9.28,-0.014,-0.004,0.182,0.425
107,3,100,3,1,7.7,11.38,-0.003,0.2,0.66,1.066
108,3,100,5,1,6.55,11.6,0.002,0.534,1.169,1.751
109,3,150,0,1,3.32,4.84,-0.02,-0.117,-0.05,0.097
110,3,150,1,1,6.36,9.4,-0.014,0.008,0.193,0.438
111,3,150,3,1,7.89,11.49,-0.003,0.158,0.684,1.086
112,3,150,5,1,7.99,11.9,0.005,0.563,1.231,1.79
113,10,0,0,1,5.32,5.36,0.034,0.218,0.253,0.352
114,10,0,1,1,5.65,5.73,0.042,0.29,0.337,0.417
115,10,0,3,1,5.8,5.84,0.06,0.411,0.451,0.54
116,10,0,5,1,5.81,5.89,0.072,0.574,0.612,0.708
117,10,50,0,1,5.28,6.01,0.037,0.221,0.312,0.508
118,10,50,1,1,7.67,9.69,0.046,0.401,0.592,0.848
119,10,50,3,1,8.55,11.59,0.07,0.691,1.072,1.516
120,10,50,5,1,8.66,11.83,0.086,1.048,1.665,2.269
121,10,100,0,1,5.32,6.01,0.036,0.232,0.333,0.528
122,10,100,1,1,7.8,9.86,0.047,0.436,0.623,0.886
123,10,100,3,1,8.79,11.88,0.074,0.762,1.175,1.608
124,10,100,5,1,8.89,12.05,0.092,1.15,1.801,2.405
125,10,150,0,1,5.34,5.98,0.033,0.232,0.327,0.533
126,10,150,1,1,7.82,9.97,0.049,0.447,0.645,0.908
127,10,150,3,1,8.93,11.97,0.077,0.584,1.213,1.642
128,10,150,5,1,9.04,12.41,0.096,1.171,1.863,2.458
"""
    )
    return pd.read_csv(dp16_data, skipinitialspace=True)


@pytest.fixture(name="saltsamples")
def fixture_salt_samples_df() -> pd.DataFrame:
    salt_samples = StringIO(
        """
id,VAR1,VAR2,VAR3
0,0.0,4.973769398557651,6.037109375
1,1.0,4.973769398557651,6.037109375
2,0.0,6.458663972504532,6.037109375
3,0.0,4.973769398557651,6.814453125
4,1.0,6.458663972504532,6.814453125
5,1.0,8.664820194499782,5.037109375
6,0.0,8.664820194499782,5.037109375
7,1.0,9.99860571472394,5.037109375
8,1.0,8.664820194499782,5.814453125
9,0.0,9.99860571472394,5.814453125
"""
    )
    return pd.read_csv(salt_samples)


@pytest.fixture(name="saltresponse")
def fixture_salt_response_df() -> pd.DataFrame:
    salt_response = StringIO(
        """
id,response
0,2
1,0
2,3
3,3
4,5
5,-1
6,10
7,-0.2
8,2
9,3
"""
    )

    return pd.read_csv(salt_response)


def test_calc_bic():
    X = np.array([[1.0, 4.0, 9.0], [2.0, 0.0, -1.0]])
    Y = X**2 - 1
    bic = calc_bic(X, Y)
    assert_array_almost_equal(bic, -125.7078186828783, decimal=2)


def test_kl_divergence(pq):
    p, q = pq

    assert_array_almost_equal(kl_divergence(p, q), 0.08529960)
    assert_array_almost_equal(kl_divergence(q, p), 0.09745500)


def test_gelman_rubin(pq):
    p, q = pq

    assert_array_almost_equal(gelman_rubin(p, q), 0.816496580927726)
    assert_array_almost_equal(gelman_rubin(q, p), 0.816496580927726)


def test_prepare_data(saltsamples, saltresponse, tmpdir):
    dfs = tmpdir.mkdir("tmpdir_samples").join("samples.csv")
    dfr = tmpdir.mkdir("tmpdir_response").join("response.csv")
    dfr_m = tmpdir.mkdir("tmpdir_response_missing").join("response_missing.csv")
    saltsamples.to_csv(dfs)
    saltresponse.to_csv(dfr)

    # check if returning DataFrame
    s, r = prepare_data(dfs, dfr)
    assert isinstance(s, pd.core.frame.DataFrame)
    assert isinstance(r, pd.core.frame.DataFrame)

    # check if ndarray
    s, r = prepare_data(dfs, dfr, return_numpy=True)
    assert isinstance(s, np.ndarray)
    assert isinstance(r, np.ndarray)

    # check return_missing function
    saltresponse.drop([2, 6]).to_csv(dfr_m)
    s, r, m = prepare_data(dfs, dfr_m, return_missing=True)
    assert m == [2, 6]


def test_rmsd():
    a = np.array([1.0, 2.0, 3.0])
    b = a + 1
    assert_array_almost_equal(rmsd(a, b), 1.0)


def test_stepwise_bic(dp16data):
    """
    Test with and without first-order interactions

    Replicates Edwards et al (2019) model

    """

    X = dp16data[["OCFAC", "CREVLIQ", "VCLIF", "BIAS"]]
    Y = dp16data[["RCP85_2100"]]

    # From Edwards et al (2019)
    dp16_no_interactions = ["OCFAC", "CREVLIQ", "VCLIF", "BIAS"]
    dp16_with_interactions = [
        "OCFAC",
        "CREVLIQ",
        "VCLIF",
        "BIAS",
        "CREVLIQ*VCLIF",
        "OCFAC*BIAS",
        "OCFAC*VCLIF",
    ]
    dp16_no_varnames = ["X0", "X1", "X2", "X3", "X1*X2", "X0*X3", "X0*X2"]

    # Write Assertion exceptions and useful error messages

    test_vars = stepwise_bic(X.values, Y.values, varnames=X.columns, interactions=False)
    assert test_vars == dp16_no_interactions
    test_vars = stepwise_bic(X.values, Y.values, varnames=X.columns, interactions=True)
    assert test_vars == dp16_with_interactions
    # Check default for interactions
    test_vars = stepwise_bic(X.values, Y.values, varnames=X.columns)
    assert test_vars == dp16_with_interactions
    # Check if varnames are not provided
    test_vars = stepwise_bic(X.values, Y.values)
    assert test_vars == dp16_no_varnames
